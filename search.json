[{"path":"https://kaiaragaki.github.io/ezmtt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ezmtt authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/articles/using-ezmtt.html","id":"tidying","dir":"Articles","previous_headings":"","what":"Tidying","title":"Using ezmtt","text":"Typically, ’ll start process raw spectramax .txt file. ’ll look something like : first step turn workable object. can using mop::read_spectramax function: object - spectramax object - data locked away . can make dump data easy, workable data.frame using mop::scrub: However, notice ’s annotation data.frame, experimentally speaking - , condition well .","code":"mtt_txt <- system.file(\"extdata\", \"mtt.txt\", package = \"ezmtt\") read_lines(mtt_txt) #>  [1] \"##BLOCKS= 2          \"                                                                                                                                                                                       #>  [2] \"Plate:\\tPlate#1\\t1.3\\tPlateFormat\\tEndpoint\\tAbsorbance\\tRaw\\tFALSE\\t1\\t\\t\\t\\t\\t\\t2\\t562 660\\t1\\t12\\t96\\t1\\t8\\tNone\\t\"                                                                                       #>  [3] \"\\tTemperature(\\xa1C)\\t1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\\t11\\t12\\t\\t1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\\t11\\t12\\t\\t\"                                                                                                    #>  [4] \"\\t39.10\\t0.5625\\t0.4221\\t0.6188\\t0.4454\\t0.5272\\t0.0471\\t0.5126\\t0.475\\t0.5376\\t0.5558\\t0.503\\t0.4442\\t\\t0.0688\\t0.0617\\t0.0674\\t0.0606\\t0.0648\\t0.0427\\t0.0642\\t0.0619\\t0.0663\\t0.0621\\t0.0611\\t0.0576\\t\\t\" #>  [5] \"\\t\\t0.4833\\t0.4869\\t0.4415\\t0.414\\t0.5086\\t0.0486\\t0.3672\\t0.5572\\t0.3897\\t0.4283\\t0.5571\\t0.5438\\t\\t0.0644\\t0.064\\t0.0614\\t0.0606\\t0.0666\\t0.0431\\t0.0597\\t0.0686\\t0.0593\\t0.0609\\t0.0658\\t0.066\\t\\t\"       #>  [6] \"\\t\\t0.4201\\t0.4414\\t0.4103\\t0.4398\\t0.5038\\t0.0489\\t0.5552\\t0.3958\\t0.3731\\t0.4749\\t0.4958\\t0.6112\\t\\t0.0636\\t0.0627\\t0.0609\\t0.0632\\t0.0692\\t0.0444\\t0.0677\\t0.061\\t0.0591\\t0.0618\\t0.0633\\t0.065\\t\\t\"      #>  [7] \"\\t\\t0.4912\\t0.5407\\t0.4493\\t0.3642\\t0.4916\\t0.0503\\t0.4842\\t0.538\\t0.3975\\t0.5459\\t0.4495\\t0.4151\\t\\t0.0627\\t0.0679\\t0.0657\\t0.059\\t0.0638\\t0.0447\\t0.0619\\t0.062\\t0.055\\t0.0589\\t0.0524\\t0.0484\\t\\t\"        #>  [8] \"\\t\\t0.5823\\t0.4504\\t0.3643\\t0.3291\\t0.3999\\t0.064\\t0.2832\\t0.4228\\t0.2705\\t0.3568\\t0.3898\\t0.6187\\t\\t0.0682\\t0.0646\\t0.062\\t0.059\\t0.0604\\t0.0457\\t0.056\\t0.0581\\t0.0545\\t0.0564\\t0.0568\\t0.0656\\t\\t\"        #>  [9] \"\\t\\t0.4884\\t0.4783\\t0.3273\\t0.4488\\t0.3964\\t0.0653\\t0.298\\t0.3884\\t0.357\\t0.3716\\t0.363\\t0.4744\\t\\t0.0629\\t0.0667\\t0.06\\t0.0642\\t0.0614\\t0.0474\\t0.0588\\t0.0615\\t0.06\\t0.0609\\t0.0601\\t0.0647\\t\\t\"           #> [10] \"\\t\\t0.5693\\t0.4309\\t0.3766\\t0.3664\\t0.4332\\t0.075\\t0.2926\\t0.3781\\t0.2877\\t0.3075\\t0.3601\\t0.4789\\t\\t0.0756\\t0.069\\t0.07\\t0.0707\\t0.0704\\t0.0534\\t0.066\\t0.0673\\t0.0638\\t0.0634\\t0.0674\\t0.0693\\t\\t\"         #> [11] \"\\t\\t0.5525\\t0.4618\\t0.4009\\t0.4053\\t0.3731\\t0.0689\\t0.5157\\t0.3558\\t0.4465\\t0.4003\\t0.3938\\t0.7763\\t\\t0.074\\t0.0709\\t0.0709\\t0.0685\\t0.0687\\t0.0532\\t0.0717\\t0.0695\\t0.0707\\t0.0739\\t0.0688\\t0.0865\\t\\t\"     #> [12] \"\\t\\t\"                                                                                                                                                                                                        #> [13] \"~End\"                                                                                                                                                                                                        #> [14] \"Original Filename: Untitled   Date Last Saved: Unsaved\"                                                                                                                                                      #> [15] \"Copyright \\xa9 2003 Molecular Devices. All rights reserved.\" mtt <- read_spectramax(mtt_txt) mtt #> <spectramax[4]> #> [[1]] #> [[1]]$data #>  #>                 12 #>    ________________________ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 8 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 8 x 12 #>  #> [[1]]$type #> [1] \"Plate\" #>  #> [[1]]$wavelengths #> [1] \"562\" \"660\" #>  #>  #> # Date: 2024-11-03 scrub(mtt) #> # A tibble: 96 × 6 #>     .row  .col  nm562  nm660 exp_date   is_tidy #>    <int> <dbl>  <dbl>  <dbl> <date>     <lgl>   #>  1     1     1 0.562  0.0688 2024-11-03 TRUE    #>  2     1     2 0.422  0.0617 2024-11-03 TRUE    #>  3     1     3 0.619  0.0674 2024-11-03 TRUE    #>  4     1     4 0.445  0.0606 2024-11-03 TRUE    #>  5     1     5 0.527  0.0648 2024-11-03 TRUE    #>  6     1     6 0.0471 0.0427 2024-11-03 TRUE    #>  7     1     7 0.513  0.0642 2024-11-03 TRUE    #>  8     1     8 0.475  0.0619 2024-11-03 TRUE    #>  9     1     9 0.538  0.0663 2024-11-03 TRUE    #> 10     1    10 0.556  0.0621 2024-11-03 TRUE    #> # ℹ 86 more rows"},{"path":"https://kaiaragaki.github.io/ezmtt/articles/using-ezmtt.html","id":"a-simple-case","dir":"Articles","previous_headings":"Tidying","what":"A simple case","title":"Using ezmtt","text":"couple ways add annotations data. simplest case, ’ve used ‘single condition per quadrant’ layout denoted protocol, can simply use mtt_tidy spectramax object. conditions argument take named list exactly 4 items. names signify condition names, values doses. quadrant wasn’t used, supply NA:","code":"doses_a <- c(0, 1, 10, 100, 1000, 10000) doses_b <- c(0, 1, 2, 4, 8, 16)  tidy <- mtt_tidy(mtt, conditions = list(drug_a = doses_a, drug_b = doses_b, NA, NA)) #> Lowest dose is 0, converting to 1e-04 #> Lowest dose is 0, converting to 0.0625  tidy #> # A tibble: 48 × 6 #>     .row  .col  nm562  nm660       dose condition #>    <int> <dbl>  <dbl>  <dbl>      <dbl> <fct>     #>  1     1     1 0.562  0.0688     0.0001 drug_a    #>  2     1     2 0.422  0.0617     1      drug_a    #>  3     1     3 0.619  0.0674    10      drug_a    #>  4     1     4 0.445  0.0606   100      drug_a    #>  5     1     5 0.527  0.0648  1000      drug_a    #>  6     1     6 0.0471 0.0427 10000      drug_a    #>  7     2     1 0.483  0.0644     0.0001 drug_a    #>  8     2     2 0.487  0.064      1      drug_a    #>  9     2     3 0.442  0.0614    10      drug_a    #> 10     2     4 0.414  0.0606   100      drug_a    #> # ℹ 38 more rows"},{"path":"https://kaiaragaki.github.io/ezmtt/articles/using-ezmtt.html","id":"a-more-elaborate-case","dir":"Articles","previous_headings":"Tidying","what":"A more elaborate case","title":"Using ezmtt","text":"’ve plated something bit elaborate, worry - still ways use ezmtt preferred layout, ’ll need specify using gplate. gplate package introduces grammar specify plate layouts. ’ve ‘told’ gplate plate laid , can simply run gplate::serve get nice tidy ‘annotated’ data.frame. Let’s see works example. Let’s assume plate layout conditions column ‘bands’, 4 replicates long:  suppose different ‘dose ramps’:  setup unfortunately impossible simple mtt_tidy. Fortunately, quite simple gplate. gplate works building layers, sections, form column end data. Generally, ’ll start specifying broadest characteristics, finer details. broadest detail, course, plate. easiest way pull right spectramax object: use gplate::gp_serve object immediately turn data.frame, although wouldn’t annotations: add annotations, can use gplate::gp_sec: can helpful tell ’re right track terms plotting data. end, can use gp_plot plot sections data:  far good! Now add doses. ’ll notice set advance = FALSE. gplate allows pipe calls gp_sec one another, essentially forming nested layers. However, want supply labels (, doses) differ sections, ’ll need stay layer sections. Thus, setting advance = FALSE prevents drilling layer. can also plot - although ’s going look great, due gplate automatically converting labels factors (design mistake regret, one contend shortly):  Believe , ’re done now - can serve : rather spartan introduction gplate, elaborate layout can’t solved mtt_tidy, see vignettes gplate pkgdown","code":"plate <- plate_data(mtt) plate #>  #>                 12 #>    ________________________ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 8 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 8 x 12 gp_serve(plate) #> # A tibble: 96 × 4 #>     .row  .col  nm562  nm660 #>    <int> <dbl>  <dbl>  <dbl> #>  1     1     1 0.562  0.0688 #>  2     1     2 0.422  0.0617 #>  3     1     3 0.619  0.0674 #>  4     1     4 0.445  0.0606 #>  5     1     5 0.527  0.0648 #>  6     1     6 0.0471 0.0427 #>  7     1     7 0.513  0.0642 #>  8     1     8 0.475  0.0619 #>  9     1     9 0.538  0.0663 #> 10     1    10 0.556  0.0621 #> # ℹ 86 more rows with_conditions <- plate |>   gp_sec(     name = \"condition\", # Name of the column upon `gp_serve`     nrow = 8, # Number of rows per condition     ncol = 4, # Number of columns per condition     labels = c(\"drug_a\", \"drug_b\", \"drug_c\"),     advance = FALSE # We'll talk about this later   ) gp_plot(with_conditions, condition) with_doses <- with_conditions |>   gp_sec(     name = \"dose\",     nrow = 1, # Each set of technical replicates takes up 1 row...     ncol = 4, # ...and spans 4 columns     labels = c(       0,     0,  0,       0.01,  1,  3,       0.1,   2,  6,       1,     4,  9,       10,    8,  12,       100,   16, 15,       1000,  32, 18,       10000, 64, 21     )   ) gp_plot(with_doses) tidy <- gp_serve(with_doses) tidy #> # A tibble: 96 × 6 #>     .row  .col  nm562  nm660 condition dose  #>    <int> <dbl>  <dbl>  <dbl> <fct>     <fct> #>  1     1     1 0.562  0.0688 drug_a    0     #>  2     1     2 0.422  0.0617 drug_a    0     #>  3     1     3 0.619  0.0674 drug_a    0     #>  4     1     4 0.445  0.0606 drug_a    0     #>  5     1     5 0.527  0.0648 drug_b    0     #>  6     1     6 0.0471 0.0427 drug_b    0     #>  7     1     7 0.513  0.0642 drug_b    0     #>  8     1     8 0.475  0.0619 drug_b    0     #>  9     1     9 0.538  0.0663 drug_c    0     #> 10     1    10 0.556  0.0621 drug_c    0     #> # ℹ 86 more rows"},{"path":"https://kaiaragaki.github.io/ezmtt/articles/using-ezmtt.html","id":"calculating-normalized-optical-densities","dir":"Articles","previous_headings":"","what":"Calculating normalized optical densities","title":"Using ezmtt","text":"next step subtract background wavelength (produces value ’ll call ’diff) divide diff lowest concentration (usually negative control) particular condition (producing normalized optical density, value ’ll call div). Let’s tidy data really quickly: can use mtt_calc calculations us: ’s simple. Simpler, fact, since arguments can left defaults, making using look like practice:","code":"doses <- c(0, 1, 10, 100, 1000, 10000)  tidy <- mtt_tidy(mtt, conditions = list(drug_a = doses, drug_b = doses, NA, NA)) #> Lowest dose is 0, converting to 1e-04 #> Lowest dose is 0, converting to 1e-04  tidy #> # A tibble: 48 × 6 #>     .row  .col  nm562  nm660       dose condition #>    <int> <dbl>  <dbl>  <dbl>      <dbl> <fct>     #>  1     1     1 0.562  0.0688     0.0001 drug_a    #>  2     1     2 0.422  0.0617     1      drug_a    #>  3     1     3 0.619  0.0674    10      drug_a    #>  4     1     4 0.445  0.0606   100      drug_a    #>  5     1     5 0.527  0.0648  1000      drug_a    #>  6     1     6 0.0471 0.0427 10000      drug_a    #>  7     2     1 0.483  0.0644     0.0001 drug_a    #>  8     2     2 0.487  0.064      1      drug_a    #>  9     2     3 0.442  0.0614    10      drug_a    #> 10     2     4 0.414  0.0606   100      drug_a    #> # ℹ 38 more rows calcd <- mtt_calc(   data = tidy,   signal = \"nm562\", # column containing signal absorbances   background = \"nm660\", # column containing background absorbances   dose = \"dose\", # column containing dose data   out = \"div\", # desired name of output column   .by = \"condition\" # column(s) to group by )  head(calcd) #>     condition  nm562  nm660  dose   diff diff_mean        div #> 1      drug_a 0.5625 0.0688 1e-04 0.4937  0.424400 1.16328935 #> 1.1    drug_a 0.4221 0.0617 1e+00 0.3604  0.408700 0.84919887 #> 1.2    drug_a 0.6188 0.0674 1e+01 0.5514  0.416125 1.29924599 #> 1.3    drug_a 0.4454 0.0606 1e+02 0.3848  0.355000 0.90669180 #> 1.4    drug_a 0.5272 0.0648 1e+03 0.4624  0.441700 1.08953817 #> 1.5    drug_a 0.0471 0.0427 1e+04 0.0044  0.005000 0.01036758 mtt_calc(tidy, .by = \"condition\") |>   head() #>     condition  nm562  nm660  dose   diff diff_mean        div #> 1      drug_a 0.5625 0.0688 1e-04 0.4937  0.424400 1.16328935 #> 1.1    drug_a 0.4221 0.0617 1e+00 0.3604  0.408700 0.84919887 #> 1.2    drug_a 0.6188 0.0674 1e+01 0.5514  0.416125 1.29924599 #> 1.3    drug_a 0.4454 0.0606 1e+02 0.3848  0.355000 0.90669180 #> 1.4    drug_a 0.5272 0.0648 1e+03 0.4624  0.441700 1.08953817 #> 1.5    drug_a 0.0471 0.0427 1e+04 0.0044  0.005000 0.01036758"},{"path":"https://kaiaragaki.github.io/ezmtt/articles/using-ezmtt.html","id":"fitting-and-plotting-data","dir":"Articles","previous_headings":"","what":"Fitting and plotting data","title":"Using ezmtt","text":"Finally, plot data, can use included custom geom geom_mtt. automatically try fit data four-parameter log-logistic function reasonable constraints (drc::LL.4), gradually relax constraints fails fit.  Hmm - looks like drug_b isn’t really effect, ’s still fit LL.4 model. can override providing new column data specifies model used curve. Now can supply model model aesthetic geom_mtt:  Now note drug_b fit linearly (although looks curved due distortion logarithmic plot) drug_a fit LL.4. want add IC50s (IC percentage), can use stat_ic_mtt. stat_ic_mtt, stat, allows flexibility ’s displayed, since ’s largely focused calculating value, letting plot however want. stat_ic_mtt calculates 2 values - x, y. x IC50 value, y middle value. might expect 0.50, ’s always case. fit particularly high baseline (meaning go way 0), baseline significantly different 0.5. Let’s look examples:  , plot data geom_hline setting geom = \"hline\". geom_hline needs yintercept aesthetic, give value y stat_ic_mtt calculates using stat_ic_mtt. label?  , since stat_ic_mtt relies x y data fit curve (order figure IC50 ), using after_stat won’t work. use stage, pulls data original data’s dose column calculation, returns stat’s x value geom_text use. applies y. nice thing setup can otherwise treat IC50 annotations regular geoms, styling , allowing creative freedom:","code":"library(ggplot2) ggplot(calcd, aes(dose, div, color = condition)) +   geom_mtt() +   geom_point() +   coord_trans(\"log10\") +   scale_x_continuous(breaks = c(0.0001, 1, 10, 100, 1000, 10000), minor_breaks = NULL) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union calcd <- calcd |>   mutate(     model = if_else(condition == \"drug_b\", \"lm\", NA)   ) ggplot(calcd, aes(dose, div, color = condition)) +   geom_mtt(aes(model = model)) +   geom_point() +   coord_trans(\"log10\") +   scale_x_continuous(breaks = c(0.0001, 1, 10, 100, 1000, 10000), minor_breaks = NULL) ggplot(calcd, aes(dose, div, color = condition)) +   geom_mtt(aes(model = model)) +   stat_ic_mtt(     geom = \"hline\",     aes(model = model, yintercept = after_stat(y)),     ic = 50   ) +   geom_point() +   coord_trans(\"log10\") +   scale_x_continuous(breaks = c(0.0001, 1, 10, 100, 1000, 10000), minor_breaks = NULL) ggplot(calcd, aes(dose, div, color = condition)) +   geom_mtt(aes(model = model)) +   stat_ic_mtt(     geom = \"hline\",     aes(model = model, yintercept = after_stat(y), ic = 50)   ) +   stat_ic_mtt(     geom = \"text\",     aes(       model = model,       label = round(after_stat(x), 2),       x = stage(dose, after_stat = x),       y = stage(div, after_stat = y),       ic = 50     ),     color = \"black\"   ) +   geom_point() +   coord_trans(\"log10\") +   scale_x_continuous(breaks = c(0.0001, 1, 10, 100, 1000, 10000), minor_breaks = NULL) library(ggsci) ggplot(calcd, aes(dose, div, color = condition)) +   stat_ic_mtt(     geom = \"vline\",     aes(model = model, xintercept = after_stat(x), ic = 50),     linetype = 2, color = \"black\"   ) +   stat_ic_mtt(     geom = \"text\",     aes(       model = model,       label = round(after_stat(x), 2),       x = stage(dose, after_stat = x),       y = stage(div, after_stat = 0),       ic = 50     ),     hjust = 1, vjust = 0,     color = \"black\"   ) +   geom_mtt(aes(model = model)) +   geom_point() +   coord_trans(\"log10\") +   scale_x_continuous(     breaks = c(0.0001, 1, 10, 100, 1000, 10000),     labels = c(0, \"1nM\", \"10\", \"100\", \"1uM\", \"10\"),     minor_breaks = NULL) +   theme_minimal() +   scale_color_nejm() +   theme(legend.position = \"bottom\") +   labs(x = \"Dose\", y = \"Normalized OD\", color = \"Drug\")"},{"path":"https://kaiaragaki.github.io/ezmtt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Aragaki. Author, maintainer.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aragaki K (2024). ezmtt: Easy MTT Assay Tidying Plotting. R package version 0.2.0, https://kaiaragaki.github.io/ezmtt/.","code":"@Manual{,   title = {ezmtt: Easy MTT Assay Tidying and Plotting},   author = {Kai Aragaki},   year = {2024},   note = {R package version 0.2.0},   url = {https://kaiaragaki.github.io/ezmtt/}, }"},{"path":"https://kaiaragaki.github.io/ezmtt/index.html","id":"ezmtt","dir":"","previous_headings":"","what":"Easy MTT Assay Tidying and Plotting","title":"Easy MTT Assay Tidying and Plotting","text":"ezmtt package analyzing MTT assay data - namely, fitting plotting curves calculating IC%. mainly serves ‘companion package’ protocol , flexible enough support variety plate layouts.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easy MTT Assay Tidying and Plotting","text":"can install development version ezmtt GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"KaiAragaki/ezmtt\")"},{"path":"https://kaiaragaki.github.io/ezmtt/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Easy MTT Assay Tidying and Plotting","text":"","code":"library(ezmtt)  mtt |>   mtt_fit(     conditions = list(       drug_a = c(0, 1, 10, 100, 1000, 10000),       drug_b = c(0, 1, 10, 100, 1000, 10000),       NA,       NA     ),     model = c(\"ll\", \"lm\")   ) |>   mtt_plot(ic_pct = 50) #> Lowest dose is 0, converting to 1e-04 #> Lowest dose is 0, converting to 1e-04"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/geom_mtt.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MTT data — GeomMtt","title":"Plot MTT data — GeomMtt","text":"Plot MTT data","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/geom_mtt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MTT data — GeomMtt","text":"","code":"GeomMtt  geom_mtt(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   n = 1000,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/geom_mtt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plot MTT data — GeomMtt","text":"object class GeomMtt (inherits Geom, ggproto, gg) length 5.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/geom_mtt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MTT data — GeomMtt","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. n many line segments used draw MTT curve? na.rm Remove NA values? show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed ggplot2::layer params","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data from an MTT — mtt","title":"Example data from an MTT — mtt","text":"dataset including absorbance data 562nm 660nm","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data from an MTT — mtt","text":"","code":"mtt"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data from an MTT — mtt","text":"spectramax object data gp object containing absorbance values","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data from an MTT — mtt","text":"four conditions plate. plate divided quadrants. Concentrations drug increase left right (0, 1nM, 10nM, 100nM, 1uM, 10uM).","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate normalized ODs without fitting — mtt_calc","title":"Calculate normalized ODs without fitting — mtt_calc","text":"can useful calculate normalized ODs without fitting, particularly like use geom_mtt, need manipulate data downstream.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate normalized ODs without fitting — mtt_calc","text":"","code":"mtt_calc(   data,   signal = \"nm562\",   background = \"nm660\",   dose = \"dose\",   out = \"div\",   .by = NULL )"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate normalized ODs without fitting — mtt_calc","text":"data data.frame absorbances, containing least signal, background, dose columns (see ) signal name column contains signal absorbances background name column contains background absorbances. NULL, just use signal. dose name column containing concentrations drug. use lowest concentration baseline. name output column .Character vector columns summarize . columns dropped","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an curve through MTT data — mtt_fit","title":"Fit an curve through MTT data — mtt_fit","text":"Fit curve MTT data","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an curve through MTT data — mtt_fit","text":"","code":"mtt_fit(x, model, ...)  # Default S3 method mtt_fit(x, model = NULL, ...)  # S3 method for class 'gp' mtt_fit(x, model = NULL, ...)  # S3 method for class 'data.frame' mtt_fit(x, model = NULL, ...)  # S3 method for class 'spectramax' mtt_fit(x, conditions, model = NULL, ...)"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an curve through MTT data — mtt_fit","text":"x object class gplate::gp, data.frame, mop::spectramax. See details. model character vector models used fit data. NULL, start 4-parameter log-logistic model fall back using linear model. Options supplying vector include NA, \"lm\", \"ll\". See details. ... Unused conditions named list numerics length 4. Contains doses per quadrant. Names drug. quadrant omitted, supply NA. Quadrants go left right, top bottom. Identical names allowed.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an curve through MTT data — mtt_fit","text":"data.frame gplate::gp supplied, columns condition, dose, nm562 nm660 function first attempt fit data using 4-parameter log-logistic model, use linear model fallback fitting fails. model argument can used specify model manually supplying character vector length equal number unique conditions. Valid values character vector include: NA: Fitting start log-logistic, fallback linear \"ll\": (try ) fit log-logistic \"lm\": fit lm","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MTT fits — mtt_plot","title":"Plot MTT fits — mtt_plot","text":"Plot MTT fits","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MTT fits — mtt_plot","text":"","code":"mtt_plot(fits, ic_pct = NULL, ...)"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MTT fits — mtt_plot","text":"fits list fits, usually output mtt_fit ic_pct Numeric. NULL, IC plotted. Otherwise, plot ic_pct% IC % IC supplied. ... Arguments passed drc::ED","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MTT fits — mtt_plot","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy mtt data — mtt_tidy","title":"Tidy mtt data — mtt_tidy","text":"convenience function tidying mtt data. data follow standard format 'one condition per quadrant', consider tidying data using gplate. See \"Using ezmtt\" vignette information.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy mtt data — mtt_tidy","text":"","code":"mtt_tidy(x, ...)"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/mtt_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy mtt data — mtt_tidy","text":"x Object tidied ... Additional arguments passed appropriate methods conditions named list length 4, name name condition, values doses. quadrant plate used, use NA.","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/stat_ic_mtt.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MTT data — stat_ic_mtt","title":"Plot MTT data — stat_ic_mtt","text":"Plot MTT data","code":""},{"path":"https://kaiaragaki.github.io/ezmtt/reference/stat_ic_mtt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MTT data — stat_ic_mtt","text":"","code":"stat_ic_mtt(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   ...,   ic = 50,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://kaiaragaki.github.io/ezmtt/reference/stat_ic_mtt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MTT data — stat_ic_mtt","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... Additional arguments passed ggplot2::layer params ic IC percentage calculated show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""}]
